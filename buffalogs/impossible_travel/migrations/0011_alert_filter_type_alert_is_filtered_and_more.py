# Generated by Django 5.1.4 on 2024-12-22 17:54

import django.contrib.postgres.fields
import django.utils.timezone
import impossible_travel.models
from impossible_travel.constants import AlertDetectionType
from django.db import migrations, models
import logging

logger = logging.getLogger(__name__)


def update_alert_name(apps, schema_editor):
    Alert = apps.get_model("impossible_travel", "Alert")
    for alert in Alert.objects.all():
        if alert.name == "Impossible Travel detected":
            alert.name = AlertDetectionType.IMP_TRAVEL
        elif alert.name == "Login from new country":
            alert.name = AlertDetectionType.NEW_COUNTRY
        elif alert.name == "Login from new device":
            alert.name = AlertDetectionType.NEW_DEVICE
        else:
            logger.error(f"Impossible to update the alert.name of the alert with id {alert.id}")
        alert.save()


class Migration(migrations.Migration):

    dependencies = [
        (
            "impossible_travel",
            "0010_config_alert_max_days_config_distance_accepted_and_more",
        ),
    ]

    operations = [
        migrations.AddField(
            model_name="alert",
            name="filter_type",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(
                    blank=True,
                    choices=[
                        ("isp_filter", "Alert filtered because the ISP is whitelisted"),
                        (
                            "is_mobile_filter",
                            "Alert filtered because login from a mobile device",
                        ),
                        ("is_vip_filter", "Alert filtered because the user is not vip"),
                        (
                            "allowed_country_filter",
                            "Alert filtered because the country is whitelisted",
                        ),
                        (
                            "ignored_user_filter",
                            "Alert filtered because the user is ignored",
                        ),
                        (
                            "alert_minimum_risk_score_filter",
                            "Alert filtered because the risk_score is lower than the threshold",
                        ),
                        (
                            "filtered_alerts",
                            "Alert filtered because this detection type is excluded",
                        ),
                    ],
                    max_length=50,
                ),
                blank=True,
                default=list,
                help_text="List of filters that disabled the related alert",
                size=None,
            ),
        ),
        migrations.AddField(
            model_name="alert",
            name="is_filtered",
            field=models.BooleanField(
                default=False,
                help_text="Show if the alert has been filtered because of some filter (listed in the filter_type field)",
            ),
        ),
        migrations.AddField(
            model_name="config",
            name="alert_is_vip_only",
            field=models.BooleanField(
                default=False,
                help_text="Flag to send alert only related to the users in the vip_users list",
            ),
        ),
        migrations.AddField(
            model_name="config",
            name="alert_minimum_risk_score",
            field=models.CharField(
                choices=[
                    ("No risk", "User has no risk"),
                    ("Low", "User has a low risk"),
                    ("Medium", "User has a medium risk"),
                    ("High", "User has a high risk"),
                ],
                default="No risk",
                help_text="Select the risk_score that users should have at least to send alert",
                max_length=30,
            ),
        ),
        migrations.AddField(
            model_name="config",
            name="enabled_users",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(max_length=50),
                blank=True,
                default=impossible_travel.models.get_default_enabled_users,
                help_text="List of selected users on which the detection will perform",
                size=None,
            ),
        ),
        migrations.AddField(
            model_name="config",
            name="filtered_alerts_types",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(
                    blank=True,
                    choices=[
                        ("New Device", "Login from new device"),
                        ("Imp Travel", "Impossible Travel detected"),
                        ("New Country", "Login from new country"),
                        ("User Risk Threshold", "User risk higher than threshold"),
                        ("Login Anonymizer Ip", "Login from an anonymizer IP"),
                        (
                            "Atypical Country",
                            "Login from a country not visited recently",
                        ),
                    ],
                    max_length=50,
                ),
                blank=True,
                default=list,
                help_text="List of alerts' types to exclude from the alerting",
                size=None,
            ),
        ),
        migrations.AddField(
            model_name="config",
            name="ignore_mobile_logins",
            field=models.BooleanField(
                default=False,
                help_text="Flag to ignore mobile devices from the detection",
            ),
        ),
        migrations.AlterField(
            model_name="alert",
            name="name",
            field=models.CharField(
                choices=[
                    ("New Device", "Login from new device"),
                    ("Imp Travel", "Impossible Travel detected"),
                    ("New Country", "Login from new country"),
                    ("User Risk Threshold", "User risk higher than threshold"),
                    ("Login Anonymizer Ip", "Login from an anonymizer IP"),
                    ("Atypical Country", "Login from a country not visited recently"),
                ],
                max_length=30,
            ),
        ),
        migrations.AlterField(
            model_name="config",
            name="allowed_countries",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(max_length=20),
                blank=True,
                default=impossible_travel.models.get_default_allowed_countries,
                help_text="List of countries to exclude from the detection, because 'trusted' for the customer",
                size=None,
            ),
        ),
        migrations.AlterField(
            model_name="config",
            name="ignored_ips",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(max_length=50),
                blank=True,
                default=impossible_travel.models.get_default_ignored_ips,
                help_text="List of IPs to remove from the detection",
                size=None,
            ),
        ),
        migrations.AlterField(
            model_name="config",
            name="ignored_users",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(max_length=50),
                blank=True,
                default=impossible_travel.models.get_default_ignored_users,
                help_text="List of users to be ignored from the detection",
                size=None,
            ),
        ),
        migrations.AlterField(
            model_name="config",
            name="vip_users",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(max_length=50),
                blank=True,
                default=impossible_travel.models.get_default_vip_users,
                help_text="List of users considered more sensitive",
                size=None,
            ),
        ),
        migrations.AlterField(
            model_name="login",
            name="timestamp",
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AlterField(
            model_name="user",
            name="risk_score",
            field=models.CharField(
                choices=[
                    ("No risk", "User has no risk"),
                    ("Low", "User has a low risk"),
                    ("Medium", "User has a medium risk"),
                    ("High", "User has a high risk"),
                ],
                default="No risk",
                max_length=30,
            ),
        ),
        migrations.AddConstraint(
            model_name="alert",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    (
                        "name__in",
                        [
                            "New Device",
                            "Imp Travel",
                            "New Country",
                            "User Risk Threshold",
                            "Login Anonymizer Ip",
                            "Atypical Country",
                        ],
                    )
                ),
                name="valid_alert_name_choice",
            ),
        ),
        migrations.AddConstraint(
            model_name="alert",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    (
                        "filter_type__contained_by",
                        [
                            (
                                "isp_filter",
                                "Alert filtered because the ISP is whitelisted",
                            ),
                            (
                                "is_mobile_filter",
                                "Alert filtered because login from a mobile device",
                            ),
                            (
                                "is_vip_filter",
                                "Alert filtered because the user is not vip",
                            ),
                            (
                                "allowed_country_filter",
                                "Alert filtered because the country is whitelisted",
                            ),
                            (
                                "ignored_user_filter",
                                "Alert filtered because the user is ignored",
                            ),
                            (
                                "alert_minimum_risk_score_filter",
                                "Alert filtered because the risk_score is lower than the threshold",
                            ),
                            (
                                "filtered_alerts",
                                "Alert filtered because this detection type is excluded",
                            ),
                        ],
                    )
                ),
                name="valid_alert_filter_type_choices",
            ),
        ),
        migrations.AddConstraint(
            model_name="config",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    (
                        "alert_minimum_risk_score__in",
                        ["No risk", "Low", "Medium", "High"],
                    )
                ),
                name="valid_config_alert_minimum_risk_score_choice",
            ),
        ),
        migrations.AddConstraint(
            model_name="config",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    (
                        "filtered_alerts_types__contained_by",
                        [
                            (
                                "isp_filter",
                                "Alert filtered because the ISP is whitelisted",
                            ),
                            (
                                "is_mobile_filter",
                                "Alert filtered because login from a mobile device",
                            ),
                            (
                                "is_vip_filter",
                                "Alert filtered because the user is not vip",
                            ),
                            (
                                "allowed_country_filter",
                                "Alert filtered because the country is whitelisted",
                            ),
                            (
                                "ignored_user_filter",
                                "Alert filtered because the user is ignored",
                            ),
                            (
                                "alert_minimum_risk_score_filter",
                                "Alert filtered because the risk_score is lower than the threshold",
                            ),
                            (
                                "filtered_alerts",
                                "Alert filtered because this detection type is excluded",
                            ),
                        ],
                    )
                ),
                name="valid_alert_filters_choices",
            ),
        ),
        migrations.AddConstraint(
            model_name="user",
            constraint=models.CheckConstraint(
                condition=models.Q(("risk_score__in", ["No risk", "Low", "Medium", "High"])),
                name="valid_user_risk_score_choice",
            ),
        ),
        migrations.RunPython(update_alert_name, migrations.RunPython.noop),
    ]
